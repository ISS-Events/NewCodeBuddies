// <auto-generated />
using System;
using CodeBuddies.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeBuddies.Migrations
{
    [DbContext(typeof(DatabaseApplicationContext))]
    [Migration("20240522114532_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CodeBuddies.Models.Entities.Answer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfLastEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Badge", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Buddy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BuddyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Buddies");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Category", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.CodeContribution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ContributionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContributionValue")
                        .HasColumnType("int");

                    b.Property<long>("Contributor")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("CodeContributions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.CodeReviewSection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CodeSection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("CodeReviewSections");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Comment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfLastEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.DrawingBoard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DrawingBoards");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CodeReviewSectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CodeReviewSectionId");

                    b.HasIndex("SessionId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BuddyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BuddyId");

                    b.HasIndex("UserID");

                    b.ToTable("Notification");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Question", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("CategoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfLastEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Reaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentID")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionID")
                        .HasColumnType("bigint");

                    b.Property<long?>("TextPostID")
                        .HasColumnType("bigint");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("CommentID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TextPostID");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Buddies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePaths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("QuestionID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.TextEditor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FilePaths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextEditors");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.TextPost", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfLastEdit")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("TextPosts");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.InfoNotification", b =>
                {
                    b.HasBaseType("CodeBuddies.Models.Entities.Notification");

                    b.HasDiscriminator().HasValue("InfoNotification");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.InviteNotification", b =>
                {
                    b.HasBaseType("CodeBuddies.Models.Entities.Notification");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("InviteNotification");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Badge", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.User", null)
                        .WithMany("BadgeList")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Category", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.User", null)
                        .WithMany("CategoriesModeratedList")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.CodeContribution", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.Session", null)
                        .WithMany("CodeContributions")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.CodeReviewSection", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.Session", null)
                        .WithMany("CodeReviewSections")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Message", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.CodeReviewSection", null)
                        .WithMany("Messages")
                        .HasForeignKey("CodeReviewSectionId");

                    b.HasOne("CodeBuddies.Models.Entities.Session", null)
                        .WithMany("Messages")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Notification", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.Buddy", null)
                        .WithMany("Notifications")
                        .HasForeignKey("BuddyId");

                    b.HasOne("CodeBuddies.Models.Entities.User", null)
                        .WithMany("NotificationList")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Question", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Reaction", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.Answer", null)
                        .WithMany("Reactions")
                        .HasForeignKey("AnswerId");

                    b.HasOne("CodeBuddies.Models.Entities.Comment", null)
                        .WithMany("Reactions")
                        .HasForeignKey("CommentID");

                    b.HasOne("CodeBuddies.Models.Entities.Question", null)
                        .WithMany("Reactions")
                        .HasForeignKey("QuestionID");

                    b.HasOne("CodeBuddies.Models.Entities.TextPost", null)
                        .WithMany("Reactions")
                        .HasForeignKey("TextPostID");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Session", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.DrawingBoard", "DrawingBoard")
                        .WithOne()
                        .HasForeignKey("CodeBuddies.Models.Entities.Session", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeBuddies.Models.Entities.TextEditor", "TextEditor")
                        .WithOne()
                        .HasForeignKey("CodeBuddies.Models.Entities.Session", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawingBoard");

                    b.Navigation("TextEditor");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Tag", b =>
                {
                    b.HasOne("CodeBuddies.Models.Entities.Question", null)
                        .WithMany("Tags")
                        .HasForeignKey("QuestionID");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Answer", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Buddy", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.CodeReviewSection", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Comment", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Question", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.Session", b =>
                {
                    b.Navigation("CodeContributions");

                    b.Navigation("CodeReviewSections");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.TextPost", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("CodeBuddies.Models.Entities.User", b =>
                {
                    b.Navigation("BadgeList");

                    b.Navigation("CategoriesModeratedList");

                    b.Navigation("NotificationList");
                });
#pragma warning restore 612, 618
        }
    }
}
